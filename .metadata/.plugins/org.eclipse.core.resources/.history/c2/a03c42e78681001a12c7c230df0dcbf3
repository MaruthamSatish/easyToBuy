/**
 * 
 */
package com.easttobuy;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

/**
 * @author chiru
 *
 */
public class CategoryRestController {
	
	@Autowired
    CategoryRepository categoryRepository;


    @GetMapping("/books")
    public List<Category> getAllCategories() {
        return categoryRepository.findAll();
    }


    @PostMapping("/books")
    public Category createNote(@Valid @RequestBody Category category) {
        return categoryRepository.save(category);
    }


    @GetMapping("/books/{id}")
    public Category getCategoryId(@PathVariable(value = "categoryId")Integer categoryId) throws BookNotFoundException {
        return categoryRepository.findByCategoryId(categoryId)
                .orElseThrow(() -> new BookNotFoundException(bookId));
    }

// Update a Note
    @PutMapping("/books/{id}")
    public Book updateNote(@PathVariable(value = "id") Long bookId,
                           @Valid @RequestBody Book bookDetails) throws BookNotFoundException {

Book book = bookRepository.findById(bookId)
                .orElseThrow(() -> new BookNotFoundException(bookId));

book.setBook_name(bookDetails.getBook_name());
        book.setAuthor_name(bookDetails.getAuthor_name());
        book.setIsbn(bookDetails.getIsbn());

Book updatedBook = bookRepository.save(book);

return updatedBook;
    }

// Delete a Note
    @DeleteMapping("/books/{id}")
    public ResponseEntity<?> deleteBook(@PathVariable(value = "id") Long bookId) throws BookNotFoundException {
        Book book = bookRepository.findById(bookId)
                .orElseThrow(() -> new BookNotFoundException(bookId));

bookRepository.delete(book);

return ResponseEntity.ok().build();
    }
}

}
